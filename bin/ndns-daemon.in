#!/usr/bin/env python
# -*- Mode:python; c-file-style:"gnu"; indent-tabs-mode:nil -*- */
#
# Copyright (c) 2013, Regents of the University of California
#                     Alexander Afanasyev
#
# BSD license, See the doc/LICENSE file for more information
#
# Author: Alexander Afanasyev <alexander.afanasyev@ucla.edu>
#

import sys
sys.path = ["@LIBDIR@/ndns"] + sys.path

import argparse
import logging, logging.handlers
import signal
import setproctitle

from ndns.tools.ndns_daemon import NdnsDaemon

######################################################################
######################################################################
######################################################################

parser = argparse.ArgumentParser(description='NDNS daemon')
parser.add_argument('-v', dest='debug', action='store_true', default=False,
                    help='''Output verbose logging''')
parser.add_argument('-q', dest='quiet', action='store_true', default=False,
                    help='''Be quiet and do not do any logging to standard output or stderr''')
parser.add_argument('-l', dest='logfile', type=str,
                    help='''Write logging to the specified logfile''')
parser.add_argument('--prefix-discovery', dest='prefix_discovery', action='store_true', default=False,
                    help='''Enables automatic prefix discovery''')
parser.add_argument('--data-dir', dest='data_dir', type=str, default="@LOCALSTATEDIR@/ndns",
                    help='''Directory that will store NDNS database and key files [default: @LOCALSTATEDIR@/ndns]''')
parser.add_argument('--scope', dest='scopes', action='append', type=str, default=[],
                    help='''Additional forwarding hint scope (may be repeated multiple times for several additional scopes)''')
args = parser.parse_args()

_LOG = logging.getLogger ("")
_LOG.setLevel (logging.DEBUG if (args.debug) else logging.WARN)

if not args.quiet:
    _handler = logging.StreamHandler (sys.stderr)
    _handler.setLevel (logging.DEBUG if (args.debug) else logging.WARN)
    _handler.setFormatter (logging.Formatter('%(asctime)s %(name)s [%(levelname)s]  %(message)s', '%H:%M:%S'))
    _LOG.addHandler (_handler)

if args.logfile:
    _handler = logging.handlers.RotatingFileHandler (args.logfile, maxBytes=10000000, backupCount=10)
    _handler.setLevel (logging.DEBUG if (args.debug) else logging.WARN)
    _handler.setFormatter (logging.Formatter('%(asctime)s %(name)s [%(levelname)s]  %(message)s'))
    _LOG.addHandler (_handler)

if (args.quiet and not args.logfile):
    _LOG.addHandler (logging.NullHandler ())

######################################################################
######################################################################
######################################################################


# main
if( __name__ == '__main__' ):
    setproctitle.setproctitle ("ndns-daemon")
    ndns_daemon = NdnsDaemon (args.data_dir, args.scopes, enable_dyndns = True)

    signal.signal (signal.SIGTERM, lambda signum, frame: ndns_daemon.terminate ())
    signal.signal (signal.SIGQUIT, lambda signum, frame: ndns_daemon.terminate ())
    signal.signal (signal.SIGINT,  lambda signum, frame: ndns_daemon.terminate ())
    signal.signal (signal.SIGUSR1, lambda signum, frame: ndns_daemon.reloadConfig ())

    if args.prefix_discovery:
        discovery = ndn.LocalPrefixDiscovery (periodicity = 300)
        discovery.subscribe ("ndns", ndns_daemon.updateLocalPrefix)

    ndns_daemon.run ()

    if args.prefix_discovery:
        discovery.shutdown ()
