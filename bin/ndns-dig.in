#!/usr/bin/env python
# -*- Mode:python; c-file-style:"gnu"; indent-tabs-mode:nil -*- */
#
# Copyright (c) 2013, Regents of the University of California
#                     Alexander Afanasyev
#
# BSD license, See the doc/LICENSE file for more information
#
# Author: Alexander Afanasyev <alexander.afanasyev@ucla.edu>
#

# make sure modules from lib/ are loaded
import sys, os
sys.path = ["@LIBDIR@/ndns"] + sys.path

import argparse, logging

#install from contrib/
import ndn
import dns.rdataclass, dns.rdatatype, dns.rdata, dns.rrset, dns.zone

# part of lib/
import ndns

######################################################################
######################################################################
######################################################################

parser = argparse.ArgumentParser(description='NDNS client tool')
parser.add_argument('--ndn', dest='ndn', action='store_true', default=False,
                    help='''Expect NDN name, otherwise DNS name is expected as input for the label''')

parser.add_argument('-v', dest='verbose', action='store_true', default=False,
                    help='''Include verbose information in log output''')
parser.add_argument('--trust', dest='verbose_trust', action='store_true', default=False,
                    help='''Include verbose information about trust in log output''')

parser.add_argument('-q', dest='quiet', action='store_true', default=False,
                    help='''Output only RR data''')

parser.add_argument('--simple', dest='simple', action='store_true', default=False,
                    help='''Use simple (explicit) query, instead of iterative one''')

parser.add_argument('--raw', dest='raw', action='store_true', default=False,
                    help='''zone includes full NDN name of the DNS record to be queried''')

parser.add_argument('--hint', '--fh', '-f', dest='fh', type=str,
                    help='''Forwarding hint to use for the query''')

parser.add_argument('zone', metavar='zone', type=str,
                    help='''Zone to query (will not be needed later)''')

parser.add_argument('name', metavar='name', type=str, nargs='?',
                    help='''Name to query for''')

parser.add_argument('rrtype', metavar='rrtype', type=str, nargs='?', default='FH',
                    help='''Resource record to query''')
args = parser.parse_args()

_LOG = logging.getLogger ("ndns")
_LOG.setLevel (logging.DEBUG)
if not args.verbose:
    _LOG.setLevel (logging.WARN)

# if not args.verbose_trust:
#     logging.getLogger ("ndns.policy.Identity").setLevel (logging.WARN)

_handler = logging.StreamHandler (sys.stderr)
# _handler.setLevel (logging.DEBUG if (args.debug) else logging.WARN)
# if args.verbose:
#     _handler.setLevel (logging.INFO)
_handler.setFormatter (logging.Formatter('%(asctime)s %(name)s [%(levelname)s]  %(message)s', '%H:%M:%S'))
_LOG.addHandler (_handler)

######################################################################
######################################################################
######################################################################

# main
if( __name__ == '__main__' ):
    zone = ndn.Name (args.zone)
    
    if args.simple:
        if args.name:
            if not args.ndn:
                args.name = ndns.ndnify (args.name)
            name = ndn.Name (args.name)
        elif not args.raw:
            sys.stderr.write ("ERROR: For simple query, ``name'' (label) argument is mandatory\n")
            exit (5)

    def onResult (result, msg):
        if not args.quiet:
            print ";; Got data packet [%s]" % result.name
            print ";;       signed by [%s]" % result.signedInfo.keyLocator.keyName
            print ""
            print msg.to_text ()
        else:
            for rrset in msg.answer:
                print rrset.to_text ()

        loop.stop ()

    def onError (errmsg, *k, **kw):
        print ";; %s" % errmsg
        loop.stop ()

    face = ndn.Face ()
    # ndns.query.SimpleQuery.expressQueryForRaw (face, zone, onResult, onError)

    if args.simple:
        if not args.raw:
            ndns.CachingQueryObj.expressQueryFor (face, 
                                                  onResult, onError, 
                                                  zone, args.fh, name, args.rrtype)
        else:
            ndns.CachingQueryObj.expressQueryForRaw (face, 
                                                     onResult, onError,
                                                     zone, hint = args.fh)
    else:
        args.rrtype = args.name
        ndns.CachingQueryObj.expressQuery (zone, args.rrtype)
    
    loop = ndn.EventLoop (face)
    loop.run ()

    # try:
    #     if args.simple:
    #         if not args.raw:
    #             result, msg = ndns.CachingQueryObj.get_simple (zone, args.fh, name, args.rrtype)
    #         else:
    #             result, msg = ndns.CachingQueryObj.get_raw (zone, hint = args.fh)
    #     else:
    #         args.rrtype = args.name
    #         result, msg = ndns.CachingQueryObj.get (zone, args.rrtype)

    # except dns.rdatatype.UnknownRdatatype:
    #     sys.stderr.write ("Requested an unrecognized RR type [%s] to query\n" % args.rrtype)
    #     exit (1)
    # except ndns.QueryNoAnswer:
    #     print ";; Got no answer"
    #     exit (2)
    # except ndns.QueryAnswerNotTrusted:
    #     print ";; Got answer, but result is not trusted"
    #     exit (3)
    # except ndns.query.QueryNoValidAnswer, e:
    #     print ";; Got no valid answer"
    #     if not e.msg is None:
    #         print e.msg.to_text ()
    #     exit (4)

