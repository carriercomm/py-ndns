#!/usr/bin/env python
# -*- Mode:python; c-file-style:"gnu"; indent-tabs-mode:nil -*- */
#
# Copyright (c) 2013, Regents of the University of California
#                     Alexander Afanasyev
#
# BSD license, See the doc/LICENSE file for more information
#
# Author: Alexander Afanasyev <alexander.afanasyev@ucla.edu>
#

# make sure modules from lib/ are loaded
import sys
sys.path = ["@LIBDIR@/ndns"] + sys.path

import argparse
import logging

import ndns.tools.dig

######################################################################
######################################################################
######################################################################

parser = argparse.ArgumentParser(description='NDNS client tool')
parser.add_argument('--ndn', dest='ndn', action='store_true', default=False,
                    help='''Expect NDN name, otherwise DNS name is expected as input for the label''')

parser.add_argument('-v', dest='verbose', action='store_true', default=False,
                    help='''Include verbose information in log output''')
parser.add_argument('--trust', dest='verbose_trust', action='store_true', default=False,
                    help='''Include verbose information about trust in log output''')

parser.add_argument('-q', dest='quiet', action='store_true', default=False,
                    help='''Output only RR data''')

parser.add_argument('--simple', dest='simple', action='store_true', default=False,
                    help='''Use simple (explicit) query, instead of iterative one''')

parser.add_argument('--raw', dest='raw', action='store_true', default=False,
                    help='''zone includes full NDN name of the DNS record to be queried''')

parser.add_argument('--hint', '--fh', '-f', dest='fh', type=str,
                    help='''Forwarding hint to use for the query''')

parser.add_argument ('-z', dest='zone_fh_query', action='store_true', default=False,
                     help='''Make query for zone's forwarding hint''')

parser.add_argument ('--verify', dest='verify', action='store_true', default=False,
                     help='''Enable verification on each step of query process, otherwise only the final result will be verified''')

parser.add_argument('zone', metavar='zone', type=str,
                    help='''Zone to query (will not be needed later)''')

parser.add_argument('name', metavar='name', type=str, nargs='?',
                    help='''Name to query for''')

parser.add_argument('rrtype', metavar='rrtype', type=str, nargs='?', default='FH',
                    help='''Resource record to query''')
args = parser.parse_args()

_LOG = logging.getLogger ("ndns")
_LOG.setLevel (logging.DEBUG)
if not args.verbose:
    _LOG.setLevel (logging.WARN)

# logging.getLogger ("ndns.query.Caching").setLevel (logging.WARN)    
logging.getLogger ("ndns.policy.Identity").setLevel (logging.DEBUG if args.verbose_trust else logging.WARN)

_handler = logging.StreamHandler (sys.stderr)
# _handler.setLevel (logging.DEBUG if (args.debug) else logging.WARN)
# if args.verbose:
#     _handler.setLevel (logging.INFO)
_handler.setFormatter (logging.Formatter('%(asctime)s %(name)s [%(levelname)s]  %(message)s', '%H:%M:%S'))
_LOG.addHandler (_handler)

######################################################################
######################################################################
######################################################################

# main
if( __name__ == '__main__' ):
    ndns.tools.dig.dig (args, sys.stdout)
