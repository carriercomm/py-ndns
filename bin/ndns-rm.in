#!/usr/bin/env python
# -*- Mode:python; c-file-style:"gnu"; indent-tabs-mode:nil -*- */
# 
# Copyright (c) 2013, Regents of the University of California
#                     Alexander Afanasyev
# 
# BSD license, See the doc/LICENSE file for more information
# 
# Author: Alexander Afanasyev <alexander.afanasyev@ucla.edu>
# 

import sys
sys.path = ["@LIBDIR@", "@LIBDIR@/lib", "@LIBDIR@/ndns/lib"] + sys.path

import sqlite3, iscpy, argparse, time
import dns.rdataclass
import dns.rdatatype
import dns.rdata
import dns.rrset
import dns.zone
import ndns
import ndn

######################################################################
######################################################################
######################################################################

parser = argparse.ArgumentParser(description='Add RR record(s) to NDNS zone')

parser.add_argument('zone', metavar='zone', type=str,
                    help='''NDN name of the zone''')
parser.add_argument('rr', metavar='rr', type=str, nargs='?', default="",
                    help='''Specification of RR to remove. This should be a line in standard zone format, like "<TTL> <CLASS> <TYPE> <RRDATA>"
                            For example: "3600 IN FH /ndn/ucla.edu".
                            If this parameter not set, then input will be expected from standard input''')

args = parser.parse_args()

if (not args.zone):
    parser.print_help ()
    exit (1)

######################################################################
######################################################################
######################################################################

if( __name__ == '__main__' ):
    _ndns = ndns.ndns_session ()

    try:
        zone_ndn = ndn.Name (args.zone)
        zone_dns = ndns.dnsify (args.zone)
    except NameError as e:
        sys.stderr.write ("ERROR: %s\n\n" % e)
        parser.print_help ()
        exit (1)

    zone = _ndns.query (ndns.Zone).filter (ndns.Zone.has_name (zone_ndn)).first ()
    if not zone:
        sys.stderr.write ("ERROR: zone [%s] is not configured\n" % zone_ndn)
        exit (1)

    origin = dns.name.from_text (zone_dns)

    if args.rr:
        zonefile = dns.zone.from_text (args.rr, origin = origin, check_origin = False)
    else:
        zonefile = dns.zone.from_file (sys.stdin, origin = origin, check_origin = False)
    
    for (name, ttl, rdata) in zonefile.iterate_rdatas ():
        rrset = _ndns.query (ndns.RRSet).\
            with_parent (zone).\
            filter_by (label = name.to_text (), rclass = rdata.rdclass, rtype = rdata.rdtype).\
            first ()

        ret = False
        if rrset:
            for old_rdata in _ndns.query (ndns.RR).with_parent (rrset).filter (ndns.RR.has_rrdata (rdata, origin)):
                ret = True
                _ndns.delete (old_rdata)

        if ret:
            print "%s: resource record '%s %d %s'" % ("REMOVED", name, ttl, rdata.to_text ())

            if len(rrset.rrs) == 0:
                _ndns.delete (rrset)
            else:
                rrset.refresh_ndndata (_ndns, zone.default_key)
        else:
            print "%s: resource record '%s %d %s'" % ("NOT FOUND", name, ttl, rdata.to_text ())

    _ndns.commit ()
