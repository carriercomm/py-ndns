#!/usr/bin/env python
# -*- Mode:python; c-file-style:"gnu"; indent-tabs-mode:nil -*- */
# 
# Copyright (c) 2013, Regents of the University of California
#                     Alexander Afanasyev
# 
# BSD license, See the doc/LICENSE file for more information
# 
# Author: Alexander Afanasyev <alexander.afanasyev@ucla.edu>
# 

# make sure modules from lib/ are loaded
import sys; sys.path = ["%s/lib" % sys.path[0]] + sys.path

import argparse, getpass, time, os
from ndns import dyndns
import ndns.query

import dns.rdtypes.IN.NDNCERT
import dns.rdataclass, dns.rdatatype
import glob, re
import pyccn

######################################################################
######################################################################
######################################################################

parser = argparse.ArgumentParser (description='Generate key pair for dynamic NDNS')

parser.add_argument ('-f', dest='path', type=str,
                     help='''Folder where keys are stored ($HOME/.dyndns/)''')
parser.add_argument ('-c', '--check', dest='check', action='store_true', default=False,
                     help='''Check if each found key is actually configured in the zone''')
parser.add_argument ('-s', '--show', dest='show', action='store_true', default=False,
                     help='''Show dzsk record to be installed into the zone''')

args = parser.parse_args()

if( __name__ == '__main__' ):
    if not args.path:
        args.path = "%s/.dyndns" % os.getenv ("HOME")

    if not os.path.exists (args.path):
        sys.stdout.write ("No keys are configured in [%s]\n" % args.path)
        exit (1)

    _dyndns = dyndns.session (args.path)

    for zone in _dyndns.query (dyndns.Zone):
        print ";; Zone [%s]" % zone.name
        for key in zone.keys:
            sys.stdout.write (";;;; Key type: %s, name: [%s]\n" % (key.key_type, key.name))
            if key == zone.default_key:
                sys.stdout.write (";;;;;; default key\n")
            sys.stdout.write (";;;;;; Authorized namespace: [%s]\n" % re.sub (r'^((/[^/]+)*)/DNS((/[^/]+)*)/[^/]+/NDNCERT$', r'\1\3', str(key.name)))

            check_ok = True
            if args.check:
                try:
                    result, msg = ndns.query.SimpleQuery.get_raw (key.name, 
                                                                  zone = key.zone.name, hint = None, label = key.label, rrtype = "NDNCERT", 
                                                                  parse_dns = True)
                    if len(msg.answer) == 0 or msg.answer[0].rdtype != dns.rdatatype.NDNCERT:
                        check_ok = False
                    else:
                        sys.stdout.write (";;;;;; Key is installed in the zone and fully working\n")
                except:
                    check_ok = False

            if args.show or not check_ok:
                sys.stdout.write (";;;;;; the following record should be in [%s] zone\n" % key.zone.name)
                ndncert = dns.rdtypes.IN.NDNCERT.NDNCERT (dns.rdataclass.IN, dns.rdatatype.NDNCERT,
                                                          key.public_key (args.path).publicToDER ())
                
                sys.stdout.write ("%s %s %s   %s\n" % (key.label,
                                                       dns.rdataclass.to_text (ndncert.rdclass), 
                                                       dns.rdatatype.to_text (ndncert.rdtype), 
                                                       ndncert.to_text ()))

        print ""
