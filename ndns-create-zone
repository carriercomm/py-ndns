#!/usr/bin/env python
# -*- Mode:python; c-file-style:"gnu"; indent-tabs-mode:nil -*- */
# 
# Copyright (c) 2013, Regents of the University of California
#                     Alexander Afanasyev
# 
# BSD license, See the doc/LICENSE file for more information
# 
# Author: Alexander Afanasyev <alexander.afanasyev@ucla.edu>
# 

# make sure modules from lib/ are loaded
import sys; sys.path = ["%s/lib" % sys.path[0]] + sys.path

import sqlite3, iscpy, argparse, time
import dns.rdataclass
import dns.rdatatype
import dns.rdata
import dns.rrset
import ndns
import pyccn

######################################################################
######################################################################
######################################################################

parser = argparse.ArgumentParser(description='Create NDNS zone')
parser.add_argument('zone', metavar='zone', type=str,
                    help='''NDN name of the zone to create''')
parser.add_argument('--ttl', dest='ttl', type=int, default=3600,
                    help='''TTL for the created zone''')
parser.add_argument('--mname', dest='mname', type=str, default='ns',
                    help='''The <domain-name> of the name server that was the original or primary source of data for this zone.''')
parser.add_argument('--rname', dest='rname', type=str, default='root',
                    help='''A <domain-name> which specifies the mailbox of the person responsible for this zone.''')

args = parser.parse_args()

if (not args.zone):
    parser.print_help ()
    exit (1)

######################################################################
######################################################################
######################################################################

if( __name__ == '__main__' ):
    _ndns = ndns.ndns ()

    try:
        zone_ndn = pyccn.Name (args.zone)
        zone_dns = ndns.dnsify (args.zone)
    except NameError as e:
        sys.stderr.write ("ERROR: %s\n\n" % e)
        parser.print_help ()
        exit (1)

    mname = args.mname if (args.mname[-1] == '.') else "%s.%s." % (args.mname, zone_dns)
    rname = args.rname if (args.rname[-1] == '.') else "%s.%s." % (args.rname, zone_dns)
    
    if _ndns.doesZoneExists (zone_ndn):
        sys.stderr.write ("ERROR: zone [%s] already configured\n" % zone_ndn)
        sys.stderr.write ("       If you want to recrecrete the zone, delete it first using `ndn-destroy-zone` command\n")
        exit (1)

    zone_id = _ndns.createZone (zone_ndn)

    serial  = time.mktime (time.gmtime())
    refresh = args.ttl
    retry   = args.ttl
    expire  = args.ttl
    minimum = args.ttl

    soa = dns.rdata.from_text (dns.rdataclass.IN, dns.rdatatype.SOA,
                               "%s %s ( %d %d %d %d %d )" % (mname, rname, serial, refresh, retry, expire, minimum))

    _ndns.addRR (zone_id, "", args.ttl, soa)
