#!/usr/bin/env python
# -*- Mode:python; c-file-style:"gnu"; indent-tabs-mode:nil -*- */
#
# Copyright (c) 2013, Regents of the University of California
#                     Alexander Afanasyev
#
# BSD license, See the doc/LICENSE file for more information
#
# Author: Alexander Afanasyev <alexander.afanasyev@ucla.edu>
#

# make sure modules from lib/ are loaded
import sys
_WORKDIR = sys.path[0]
sys.path = ["%s/lib" % _WORKDIR] + sys.path

import sqlite3, iscpy, argparse, time, logging, logging.handlers
import os, functools, signal, daemon

#install from contrib/
import setproctitle
import pyccn
import dns.rdataclass, dns.rdatatype, dns.rdata, dns.rrset, dns.zone
from multiprocessing.pool import ThreadPool

# part of lib/
import ndns
from ndns.policy.identity import *
import dns.rdtypes.IN.NDNAUTH
import dns.rdtypes.IN.NEXISTS
import dns.rdtypes.IN.NDNCERTSEQ

######################################################################
######################################################################
######################################################################

parser = argparse.ArgumentParser(description='NDNS daemon')
parser.add_argument('-f', dest='foreground', action='store_true', default=False,
                    help='''Keep daemon in foreground (do not daemonize)''')
parser.add_argument('-d', dest='debug', action='store_true', default=False,
                    help='''Include debug information in log output''')
parser.add_argument('-q', dest='quiet', action='store_true', default=False,
                    help='''Be quiet and do not write anything to stderr''')
parser.add_argument('-l', dest='logfile', type=str,
                    help='''Write logging to the specified logfile''')
args = parser.parse_args()

_LOG = logging.getLogger ("ndns")
_LOG.setLevel (logging.DEBUG if (args.debug) else logging.WARN)

if args.foreground and not args.quiet:
    _handler = logging.StreamHandler (sys.stderr)
    _handler.setLevel (logging.DEBUG if (args.debug) else logging.WARN)
    _handler.setFormatter (logging.Formatter('%(asctime)s %(name)s [%(levelname)s]  %(message)s', '%H:%M:%S'))
    _LOG.addHandler (_handler)

if args.logfile:
    _handler = logging.handlers.RotatingFileHandler (args.logfile, maxBytes=10000000, backupCount=10)
    _handler.setLevel (logging.DEBUG if (args.debug) else logging.WARN)
    _handler.setFormatter (logging.Formatter('%(asctime)s %(name)s [%(levelname)s]  %(message)s'))
    _LOG.addHandler (_handler)

if ((args.quiet or not args.foreground) and not args.logfile):
    _LOG.addHandler (logging.NullHandler ())

_LOG = logging.getLogger ("ndns.Daemon")

######################################################################
######################################################################
######################################################################

class NdnsDaemon:
#public:
    def __init__ (self):
        setproctitle.setproctitle ("ndns-daemon")
        self._zones = []

    def run (self):
        _LOG.info ('Daemon started')

        self._ndns = ndns.ndns_session ()
        self._face = pyccn.CCN ()

        self._startZoneServing ()

        self._threadPool = ThreadPool (processes = 1)
        self._eventLoop = pyccn.EventLoop (self._face)
        self._eventLoop.run ()

        _LOG.info ('Daemon stopped')

    def terminate (self):
        self._threadPool.terminate ()
        self._threadPool.join ()
        self._stopZoneServing ()
        self._eventLoop.stop ()
        self._face = None
        self._ndns = None

    def reloadConfig (self):
        _LOG.info ('Reload zone information')
        self._stopZoneServing ()
        self._startZoneServing ()

    def updateLocalPrefix (self, oldPrefix, newPrefix):
        _LOG.info ("Update local prefix from [%s] to [%s]" % (oldPrefix, newPrefix))
        pass

#private:
    def _startZoneServing (self):
        for zone in self._ndns.query (ndns.Zone):
            _LOG.info ('>> Start serving zone [%s]' % zone.name)
            self._face.setInterestFilterSimple (zone.name.append ("DNS"),
                                                functools.partial (self._onRequest, zone))
            self._zones.append (zone)

    def _stopZoneServing (self):
        for zone in self._zones:
            _LOG.info ('<< Stop serving zone [%s]' % zone.name)
            self._face.clearInterestFilter (zone.name.append ("DNS"))
        self._zones = []

    def _onRequest (self, zone, basename, interest):
        _LOG.debug (">> basename [%s], interest [%s]" % (basename, interest.name))

        _LOG.debug ("zoneId: [%d], zoneName: [%s]" % (zone.id, zone.name))

        # if (len(interest.name) <= len(zone.name) + 1):
        #     _LOG.debug ("Invalid request. Ignoring")
        #     return pyccn.RESULT_OK

        if interest.name[-1][0] == '\xFD':
            # allow version to be specified, but ignore it for the database lookup
            request_name = pyccn.Name (interest.name[:-1])
        else:
            request_name = interest.name

        if request_name[-1] == "NDNUPDATE":
            _LOG.debug ("TEST")
            self._threadPool.apply_async (self._processDyNDNS, (zone, basename, interest, ))
            return pyccn.RESULT_OK

        try:
            rrtype = dns.rdatatype.from_text (request_name[-1])
        except Exception, e:
            _LOG.debug ("Invalid request: unknown or unrecognized RR type [%s] (%s)" % (request_name[-1], e))
            return pyccn.RESULT_OK

        try:
            label = dns.name.from_text (ndns.dnsify (str (pyccn.Name (request_name[len(basename):-1])))).relativize (origin = dns.name.root)
        except Exception, e:
            _LOG.debug ("Invalid request: label [%s] cannot be dnsified (%s)" % (request_name[len(basename):-1], e))
            return pyccn.RESULT_OK

        rrset = self._ndns.query (ndns.RRSet).with_parent (zone).filter_by (label = label.to_text (), rtype = rrtype).first ()

        if not rrset:
            # check if there is more a specific record:
            more_specific_rrset = self._ndns.query (ndns.RRSet).\
                with_parent (zone).\
                filter (ndns.RRSet.label.like ("%%.%s" % label.to_text ()), ndns.RRSet.rtype == rrtype).first ()
            if more_specific_rrset:

                msg = dns.message.Message (id=0)
                rrset = dns.rrset.RRset (zone.dns_name, dns.rdataclass.IN, dns.rdatatype.NDNAUTH)
                rrset.add (ttl = zone.soa[0].rrs[0].ttl, rd = dns.rdtypes.IN.NDNAUTH.NDNAUTH (dns.rdataclass.IN, dns.rdatatype.NDNAUTH, zone.name))
                msg.authority.append (rrset)

                dataPacket = ndns.createSignedData (self._ndns, 
                                                    interest.name.appendVersion (), 
                                                    msg.to_wire (origin = zone.dns_name), 
                                                    zone.soa[0].rrs[0].ttl, 
                                                    zone.default_key)

                _LOG.debug ("<< Requested record doesn't exist, but there is a more specific record. Returning NDNAUTH as [%s]" % dataPacket.name)
                self._face.put (dataPacket)
            else:
                # _LOG.debug ("(!!! no action defined yet!!!) The requested record (%s %s) not found in zone [%s]" %
                #             (label.to_text (), dns.rdatatype.to_text (rrtype), zone.name))

                msg = dns.message.Message (id=0)
                rrset = dns.rrset.RRset (label, dns.rdataclass.IN, dns.rdatatype.NEXISTS)
                rrset.add (ttl = zone.soa[0].rrs[0].ttl, rd = dns.rdtypes.IN.NEXISTS.NEXISTS (dns.rdataclass.IN, dns.rdatatype.NEXISTS))
                msg.answer.append (rrset)

                dataPacket = ndns.createSignedData (self._ndns, 
                                                    interest.name.appendVersion (), 
                                                    msg.to_wire (origin = zone.dns_name), 
                                                    zone.soa[0].rrs[0].ttl, 
                                                    zone.default_key)

                _LOG.debug ("<< Requested record nor more specific record exists. Returning NEXISTS as part of [%s]" % dataPacket.name)
                self._face.put (dataPacket)

            return pyccn.RESULT_OK

        dataPacket = rrset.ndndata
        if interest.name[:] != dataPacket.name[:len(interest.name)]:
            print dataPacket.name[:len(interest.name)]
            print interest.name[:]
            
            _LOG.debug ("Request is not in a canonical form (e.g., case mistmatch), requested data found, but cannot be returned")
            _LOG.debug ("        Could be version mistmatch")
            return pyccn.RESULT_OK

        _LOG.debug ("<< Found a valid record, returning data object [%s]" % dataPacket.name)
        self._face.put (dataPacket)

        return pyccn.RESULT_OK

    def _processDyNDNS (self, zone, basename, interest):
        session = ndns.ndns.ndns_session ()
        zone = session.query (ndns.Zone).filter_by (id = zone.id).first ()

        for update in interest.name[len(basename):-1]:
            try:
                dataPacket = pyccn.ContentObject.from_ccnb (update)
                _LOG.debug ("Processing %s" % dataPacket.name)
                
                if dataPacket.name[:len(basename)] != basename[:]:
                    _LOG.warn ("Record [%s] does not belong to the zone" % dataPacket.name)
                    continue

                if not ndns.TrustPolicy.verify (dataPacket):
                    _LOG.warn ("Data [%s] packet cannot be verified" % dataPacket.name)
                    continue

                seqno = pyccn.Name ().append (dataPacket.name[-1])
                label = dns.name.from_text (ndns.dnsify (str (pyccn.Name (dataPacket.name[len(basename):-2])))).relativize (origin = dns.name.root)
                rtype = dataPacket.name[-2]

                if not self._authorizeKey (session, zone, basename, dataPacket.signedInfo.keyLocator.keyName, seqno):
                    _LOG.warn ("UPDATE is signed with unrecognizeable key [%s]" % dataPacket.signedInfo.keyLocator.keyName)
                    continue

                _LOG.info ("DyNDNS update authorized: [%s]" % dataPacket.name)
                msg = dns.message.from_wire (dataPacket.content)
                
                dns_rrset = msg.answer[0]
                rrset = session.query (ndns.RRSet).\
                    with_parent (zone).\
                    filter_by (label = label.to_text (), rclass = dns_rrset.items[0].rdclass, rtype = dns_rrset.items[0].rdtype).\
                    first ()

                if not rrset:
                    rrset = ndns.RRSet (zone = zone, 
                                        label = label.to_text (), 
                                        rclass = dns_rrset.items[0].rdclass, rtype = dns_rrset.items[0].rdtype, 
                                        ndndata = dataPacket)
                else:
                    rrset.rrs = []
                    rrset.ndndata = dataPacket

                for rdata in dns_rrset.items:
                    rr = ndns.RR (rrset = rrset, ttl = dns_rrset.ttl, rrdata = rdata)

                session.commit ()

                result = ndns.createSignedData (session, interest.name.appendVersion (), "OK", 1, zone.default_key)
                self._face.put (result)

            except Exception, e:
                _LOG.warn ("Undecodeable component in DyNDNS update: [%s]" % update)
                _LOG.warn ("%s" % e)
                continue
            
    def _authorizeKey (self, session, zone, basename, keyName, seqno):
        if (keyName[-1] != "NDNCERT"):
            return False

        key_label = dns.name.from_text (ndns.dnsify (str (pyccn.Name (keyName[len(basename):-1])))).\
            relativize (origin = dns.name.root)

        key = session.query (ndns.RRSet).with_parent (zone).filter_by (label = key_label.to_text (), rtype = dns.rdatatype.NDNCERT).first ()
        if not key:
            _LOG.warn ("Key [%s] has been validated, but does not belong to the zone. Denying update" % keyName)
            return False
        
        current_key_seq = session.query (ndns.RRSet).with_parent (zone).filter_by (label = key_label.to_text (), rtype = dns.rdatatype.NDNCERTSEQ).first ()
        
        if not current_key_seq:
            current_key_seq = ndns.RRSet (label = key_label.to_text (), zone = zone, rclass = dns.rdataclass.IN, rtype = dns.rdatatype.NDNCERTSEQ)
            rd = dns.rdtypes.IN.NDNCERTSEQ.NDNCERTSEQ (rdclass = dns.rdataclass.IN, rdtype = dns.rdatatype.NDNCERTSEQ, seq = pyccn.Name ())
            rr = ndns.RR (ttl = 0, rrdata = rd, rrset = current_key_seq)

        print current_key_seq.rrs[0].dns_rrdata
        if current_key_seq.rrs[0].dns_rrdata.seq >= seqno:
            _LOG.warn ("Replay attack detected, denying the update with sequence number [%s]" % seqno)
            return False

        updated_rr = current_key_seq.rrs[0].dns_rrdata
        updated_rr.seq = seqno
        current_key_seq.rrs[0].rrdata = updated_rr
        current_key_seq.refresh_ndndata (session, zone.default_key)
        session.commit ()

        return True

# main
if( __name__ == '__main__' ):
    ndns_daemon = NdnsDaemon ()

    context = daemon.DaemonContext (
        working_directory = _WORKDIR,
        detach_process = not args.foreground,
        )
    if args.foreground:
        context.stdout = sys.stdout
        context.stderr = sys.stderr

    context.signal_map = {
        signal.SIGTERM: lambda signum, frame: ndns_daemon.terminate (),
        signal.SIGQUIT: lambda signum, frame: ndns_daemon.terminate (),
        signal.SIGINT:  lambda signum, frame: ndns_daemon.terminate (),
        signal.SIGUSR1: lambda signum, frame: ndns_daemon.reloadConfig (),
    }

    with context:
        discovery = pyccn.LocalPrefixDiscovery (periodicity = 300)
        discovery.subscribe ("ndns", ndns_daemon.updateLocalPrefix)

        ndns_daemon.run ()
        discovery.shutdown ()
