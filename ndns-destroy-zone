#!/usr/bin/env python
# -*- Mode:python; c-file-style:"gnu"; indent-tabs-mode:nil -*- */
# 
# Copyright (c) 2013, Regents of the University of California
#                     Alexander Afanasyev
# 
# BSD license, See the doc/LICENSE file for more information
# 
# Author: Alexander Afanasyev <alexander.afanasyev@ucla.edu>
# 

# make sure modules from lib/ are loaded
import sys; sys.path = ["%s/lib" % sys.path[0]] + sys.path

import argparse, pyccn, ndns

######################################################################
######################################################################
######################################################################

parser = argparse.ArgumentParser(description='Destroy NDNS zone')
parser.add_argument('zone', metavar='zone', type=str,
                    help='''NDN name of the zone to destroy. 
                            Note that all records associated with the zone will be deleted as well.''')

args = parser.parse_args()

if (not args.zone):
    parser.print_help ()
    exit (1)

######################################################################
######################################################################
######################################################################

if( __name__ == '__main__' ):
    _ndns = ndns.ndns_session ()

    try:
        zone_ndn = pyccn.Name (args.zone)
        zone_dns = ndns.dnsify (args.zone)
    except NameError as e:
        sys.stderr.write ("ERROR: %s\n\n" % e)
        parser.print_help ()
        exit (1)

    zone = _ndns.query (ndns.Zone).filter (ndns.Zone.has_name (zone_ndn)).first ()
    if not zone:
        sys.stderr.write ("ERROR: zone [%s] is not configured or already destroyed\n" % zone_ndn)
        exit (1)

    for key in zone.keys:
        key.erase (_ndns)

    _ndns.delete (zone)
    _ndns.commit ()

    sys.stdout.write ("Zone [%s] and all its records has been deleted\n" % zone_ndn)
