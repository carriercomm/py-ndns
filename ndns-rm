#!/usr/bin/env python
# -*- Mode:python; c-file-style:"gnu"; indent-tabs-mode:nil -*- */
# 
# Copyright (c) 2013, Regents of the University of California
#                     Alexander Afanasyev
# 
# BSD license, See the doc/LICENSE file for more information
# 
# Author: Alexander Afanasyev <alexander.afanasyev@ucla.edu>
# 

# make sure modules from lib/ are loaded
import sys; sys.path = ["%s/lib" % sys.path[0]] + sys.path

import sqlite3, iscpy, argparse, time
import dns.rdataclass
import dns.rdatatype
import dns.rdata
import dns.rrset
import dns.zone
import ndns
import pyccn

######################################################################
######################################################################
######################################################################

parser = argparse.ArgumentParser(description='Add RR record(s) to NDNS zone')

parser.add_argument('zone', metavar='zone', type=str,
                    help='''NDN name of the zone''')
parser.add_argument('rr', metavar='rr', type=str, nargs='?', default="",
                    help='''Specification of RR to remove. This should be a line in standard zone format, like "<TTL> <CLASS> <TYPE> <RRDATA>"
                            For example: "3600 IN FH /ndn/ucla.edu".
                            If this parameter not set, then input will be expected from standard input''')

args = parser.parse_args()

if (not args.zone):
    parser.print_help ()
    exit (1)

######################################################################
######################################################################
######################################################################

if( __name__ == '__main__' ):
    _ndns = ndns.ndns ()

    try:
        zone_ndn = pyccn.Name (args.zone)
        zone_dns = ndns.dnsify (args.zone)
    except NameError as e:
        sys.stderr.write ("ERROR: %s\n\n" % e)
        parser.print_help ()
        exit (1)

    zone_id = _ndns.doesZoneExists (zone_ndn)
    if not zone_id:
        sys.stderr.write ("ERROR: zone [%s] is not configured\n" % zone_ndn)
        exit (1)

    if args.rr:
        zone = dns.zone.from_text (args.rr, origin = dns.name.from_text (zone_dns), check_origin = False)
    else:
        zone = dns.zone.from_file (sys.stdin, origin = dns.name.from_text (zone_dns), check_origin = False)
    
    for (name, ttl, rdata) in zone.iterate_rdatas ():
        ret = _ndns.rmRR (zone_id, name, ttl, rdata)
        print "%s: resource record '%s %d %s'" % ("REMOVED" if ret else "NOT FOUND", name, ttl, rdata.to_text ())

    # if args.all and not args.type:
    #     _ndns.rmAll (zone_id, args.label)
    # elif (args.all or args.rrset) and not args.rdata:
    #     _ndns.rmRrSet (zone_id, args.label, args.type)
    # else:
    #     _ndns.rmRdata (zone_id, args.label, args.type, args.rdata)
    
