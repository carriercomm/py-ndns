#!/usr/bin/env python
# -*- Mode:python; c-file-style:"gnu"; indent-tabs-mode:nil -*- */
# 
# Copyright (c) 2013, Regents of the University of California
#                     Alexander Afanasyev
# 
# BSD license, See the doc/LICENSE file for more information
# 
# Author: Alexander Afanasyev <alexander.afanasyev@ucla.edu>
# 

# make sure modules from lib/ are loaded
import sys; sys.path = ["%s/lib" % sys.path[0]] + sys.path

import sqlite3, iscpy, argparse, time
import dns.rdataclass
import dns.rdatatype
import dns.rdata
import dns.rrset
import ndns
import pyccn

######################################################################
######################################################################
######################################################################

parser = argparse.ArgumentParser(description='Delete all RR sets with a specified label from NDNS zone')

parser.add_argument('-f', dest='force', action='store_true', default=False,
                    help='''Actually delete RR sets, otherwise number of to be deleted RR sets will be returned''')

parser.add_argument('zone', metavar='zone', type=str,
                    help='''NDN name of the zone''')
parser.add_argument('label', metavar='label', type=str,
                    help='''RR set label''')

args = parser.parse_args()

if (not args.zone or not args.label):
    parser.print_help ()
    exit (1)

######################################################################
######################################################################
######################################################################

if( __name__ == '__main__' ):
    _ndns = ndns.ndns_session ()

    try:
        zone_ndn = pyccn.Name (args.zone)
        zone_dns = ndns.dnsify (args.zone)
    except NameError as e:
        sys.stderr.write ("ERROR: %s\n\n" % e)
        parser.print_help ()
        exit (1)

    zone = _ndns.query (ndns.Zone).filter (ndns.Zone.has_name (zone_ndn)).first ()
    if not zone:
        sys.stderr.write ("ERROR: zone [%s] is not configured\n" % zone_ndn)
        exit (1)

    query = _ndns.\
            query (ndns.RRSet).\
            with_parent (zone).\
            filter_by (label = args.label)

    if args.force:
        count = 0
        for rrset in query:
            print rrset.dns_msg.to_text ()
            # _ndns.delete (rrset)
            count = count + 1

        _ndns.commit ()

        if (count > 0):
            sys.stdout.write ("%d RR sets have been deleted\n" % count)
        else:
            sys.stderr.write ("ERROR: no records for the label [%s] are found in zone [%s]\n" % (args.label, zone_ndn))
    else:
        count = query.count ()
        sys.stdout.write ("%d RR sets to be deleted (use -f to delete)\n" % count)
    
