#!/usr/bin/env python
# -*- Mode:python; c-file-style:"gnu"; indent-tabs-mode:nil -*- */
# 
# Copyright (c) 2013, Regents of the University of California
#                     Alexander Afanasyev
# 
# BSD license, See the doc/LICENSE file for more information
# 
# Author: Alexander Afanasyev <alexander.afanasyev@ucla.edu>
# 

# make sure modules from lib/ are loaded
import sys; sys.path = ["%s/lib" % sys.path[0]] + sys.path

import sqlite3, iscpy, argparse, time
import dns.rdataclass
import dns.rdatatype
import dns.rdata
import dns.rrset
import ndns
import ndn

######################################################################
######################################################################
######################################################################

parser = argparse.ArgumentParser(description='Show RR set to NDNS zone')

parser.add_argument('zone', metavar='zone', type=str,
                    help='''NDN name of the zone''')
parser.add_argument('label', metavar='label', type=str,
                    help='''RR set label''')
parser.add_argument('type', metavar='type', type=str,
                    help='''RR set type''')

args = parser.parse_args()

if (not args.zone or not args.label or not args.type):
    parser.print_help ()
    exit (1)

######################################################################
######################################################################
######################################################################

if( __name__ == '__main__' ):
    _ndns = ndns.ndns_session ()

    try:
        zone_ndn = ndn.Name (args.zone)
        zone_dns = ndns.dnsify (args.zone)
    except NameError as e:
        sys.stderr.write ("ERROR: %s\n\n" % e)
        parser.print_help ()
        exit (1)

    zone = _ndns.query (ndns.Zone).filter (ndns.Zone.has_name (zone_ndn)).first ()
    if not zone:
        sys.stderr.write ("ERROR: zone [%s] is not configured\n" % zone_ndn)
        exit (1)

    ret = False
    for rrset in _ndns.\
            query (ndns.RRSet).\
            with_parent (zone).\
            filter_by (label = args.label, rclass = dns.rdataclass.IN, rtype = dns.rdatatype.from_text (args.type)):
        ret = True
        _ndns.delete (rrset)

    _ndns.commit ()

    if ret:
        sys.stdout.write ("RR set [%s %s] removed from the zone [%s]\n" % (args.label, args.type, zone_ndn))
    else:
        sys.stderr.write ("ERROR: RR set [%s %s] is not found in zone [%s]\n" % (args.label, args.type, zone_ndn))
        exit (1)
