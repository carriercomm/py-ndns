#!/usr/bin/env python
# -*- Mode:python; c-file-style:"gnu"; indent-tabs-mode:nil -*- */
# 
# Copyright (c) 2013, Regents of the University of California
#                     Alexander Afanasyev
# 
# BSD license, See the doc/LICENSE file for more information
# 
# Author: Alexander Afanasyev <alexander.afanasyev@ucla.edu>
# 

# make sure modules from lib/ are loaded
import sys; sys.path = ["%s/lib" % sys.path[0]] + sys.path

import sqlite3, iscpy, argparse, time, logging, logging.handlers
import dns.rdataclass
import dns.rdatatype
import dns.rdata
import dns.rrset
import ndns
import ndn

######################################################################
######################################################################
######################################################################

parser = argparse.ArgumentParser(description='List records in NDNS zone')
parser.add_argument('zone', metavar='zone', type=str,
                    help='''NDN name of the zone''')
parser.add_argument('--wire', dest='show_wire', action='store_true', default=False,
                    help='''Display zone content based on wire-formatted DATA packets''')
args = parser.parse_args()

if (not args.zone):
    parser.print_help ()
    exit (1)

######################################################################
######################################################################
######################################################################

if( __name__ == '__main__' ):
    _ndns = ndns.ndns_session ()

    try:
        zone_ndn = ndn.Name (args.zone)
        zone_dns = dns.name.from_text (ndns.dnsify (args.zone))
    except NameError as e:
        sys.stderr.write ("ERROR: %s\n\n" % e)
        parser.print_help ()
        exit (1)

    zone = _ndns.query (ndns.Zone).filter (ndns.Zone.has_name (zone_ndn)).first ()
    if not zone:
        sys.stderr.write ("ERROR: zone [%s] is not configured\n" % zone_ndn)
        exit (1)

    sys.stdout.write (";; Origin: %s (%s)\n" % (zone_dns, zone_ndn))
    
    if args.show_wire:
        for row in zone.rrsets:
            print ";; DATA packet [%s]" % row.ndndata.name
            print ";;   signed by [%s]" % row.ndndata.signedInfo.keyLocator.keyName

            if row.rtype == dns.rdatatype.NDNCERT:
                rrset = row
                rr = rrset.rrs[0]
                print ("%s %d %s %s   %s" % (rrset.dns_label,
                                             rr.ttl,
                                             dns.rdataclass.to_text (rrset.rclass), 
                                             dns.rdatatype.to_text (rrset.rtype), 
                                             rr.dns_rrdata.to_text ()))
            else:
                rrset = row.dns_msg.answer[0]
                for rdata in rrset.items:
                    print ("%s %d %s %s   %s" % (rrset.name.relativize (zone_dns), 
                                                 rrset.ttl,
                                                 dns.rdataclass.to_text (rdata.rdclass), 
                                                 dns.rdatatype.to_text (rdata.rdtype), 
                                                 rdata.to_text ()))
    else:
        for rrset in zone.rrsets:
            for rr in rrset.rrs:
                # rdata = rr.dns_rrdata
                print ("%s %d %s %s   %s" % (rrset.dns_label,
                                             rr.ttl,
                                             dns.rdataclass.to_text (rrset.rclass), 
                                             dns.rdatatype.to_text (rrset.rtype), 
                                             rr.dns_rrdata.to_text ()))
