#!/usr/bin/env python
# -*- Mode:python; c-file-style:"gnu"; indent-tabs-mode:nil -*- */
# 
# Copyright (c) 2013, Regents of the University of California
#                     Alexander Afanasyev
# 
# BSD license, See the doc/LICENSE file for more information
# 
# Author: Alexander Afanasyev <alexander.afanasyev@ucla.edu>
# 

# make sure modules from lib/ are loaded
import sys; sys.path = ["%s/lib" % sys.path[0]] + sys.path

import sqlite3, iscpy, argparse, time
import dns.rdataclass
import dns.rdatatype
import dns.rdata
import dns.rrset
import ndns
import pyccn

######################################################################
######################################################################
######################################################################

parser = argparse.ArgumentParser(description='List records in NDNS zone')
parser.add_argument('zone', metavar='zone', type=str,
                    help='''NDN name of the zone''')
args = parser.parse_args()

if (not args.zone):
    parser.print_help ()
    exit (1)

######################################################################
######################################################################
######################################################################

if( __name__ == '__main__' ):
    _ndns = ndns.ndns ()

    try:
        zone_ndn = pyccn.Name (args.zone)
        zone_dns = dns.name.from_text (ndns.dnsify (args.zone))
    except NameError as e:
        sys.stderr.write ("ERROR: %s\n\n" % e)
        parser.print_help ()
        exit (1)

    zone_id = _ndns.doesZoneExists (zone_ndn)
    if not zone_id:
        sys.stderr.write ("ERROR: zone [%s] is not configured\n" % zone_ndn)
        exit (1)

    sys.stdout.write (";; Origin: %s (%s)\n" % (zone_dns, zone_ndn))
    for row in _ndns.listRrSets (zone_id):
        rrset = row['rrset']
        for rdata in rrset.items:
            print ("%s %d %s %s   %s" % (rrset.name.relativize (zone_dns), 
                                         rrset.ttl,
                                         dns.rdataclass.to_text (rdata.rdclass), 
                                         dns.rdatatype.to_text (rdata.rdtype), 
                                         rdata.to_text ()))
